package main

import (
	"testing"
)

func TestNumberOfBytesWorks_whenTypical(t *testing.T) {
	expected := uint8(0x0A)

	actual := NumberOfBytes(":0A0000000EC015C014C013C012C011")

	if actual != expected {
		t.Errorf("No Match: %d != %d", actual, expected)
	}
}

func TestStartingAddressWorks_whenTypical(t *testing.T) {
	expected := uint16(0x7E00)

	actual := StartingAddress(":107E000011E0A0E0B1E0E0E1F0E802C005900D92E1")

	if actual != expected {
		t.Errorf("No Match: %d != %d", actual, expected)
	}
}

func TestRecordWorks_whenTypical(t *testing.T) {
	expected := uint8(0xAB)

	actual := Record(":107E00AB11E0A0E0B1E0E0E1F0E802C005900D92E1")

	if actual != expected {
		t.Errorf("No Match: %d != %d", actual, expected)
	}
}

func TestPayloadWorks_whenTypical(t *testing.T) {
	expected := [32]uint8{0x11, 0xE0, 0xA0, 0xE0, 0xB1, 0xE0, 0xE0, 0xE1, 0xF0, 0xE8, 0x02, 0xC0, 0x05, 0x90, 0x0D, 0x92}

	actual_payload := Payload(":107E000011E0A0E0B1E0E0E1F0E802C005900D92E1")

	for i, e := range actual_payload {

		if e != expected[i] {
			t.Errorf("No Match: %d != %d", e, expected[i])
		}

	}
}

func TestCRCWorks_whenTypicalPositive(t *testing.T) {
	expected_in_twos_complement := uint8(0xE1)

	actual := CRC(":107E000011E0A0E0B1E0E0E1F0E802C005900D92E1")

	if uint8(actual) != uint8(expected_in_twos_complement) {
		t.Errorf("No Match: %d != %d", actual, expected_in_twos_complement)
	}
}
func TestCRCWorks_whenTypicalNegative(t *testing.T) {
	expected_in_twos_complement := uint8(0x1E)

	actual := CRC(":0300300002337A1E")

	if uint8(actual) != expected_in_twos_complement {
		t.Errorf("No Match: %d != %d", actual, expected_in_twos_complement)
	}
}

func TestIsCRCValidWorks_whenTypicalPositive(t *testing.T) {
	expected := true

	actual := IsCRCValid(":0300300002337A1E")

	if actual != expected {
		t.Errorf("No Match: %t != %t", actual, expected)
	}
}

func TestIsCRCValidWorks_whenTypicalNegative(t *testing.T) {
	expected := true

	actual := IsCRCValid(":1000800005900D92A030B107D9F711E0A0E0B1E0E2")

	if actual != expected {
		t.Errorf("No Match: %t != %t", actual, expected)
	}
}

func TestTwosComplementWorks_whenTypicalUint8(t *testing.T) {
	expected := uint8(0x1E)

	actual := TwosComplement(0xE2)

	if actual != expected {
		t.Errorf("No Match: %X != %X", actual, expected)
	}
}

func TestIsCRCOnWholeFileValid_whenTypical(t *testing.T) {
	expected := true
	file := []string{
		":100000000C9434000C944F000C944F000C944F004F",
		":100010000C944F000C944F000C944F000C944F0024",
		":100020000C944F000C944F000C944F000C944F0014",
		":100030000C944F000C944F000C944F000C944F0004",
		":100040000C944F000C944F000C944F000C944F00F4",
		":100050000C944F000C944F000C944F000C944F00E4",
		":100060000C944F000C944F0011241FBECFEFD4E02E",
		":10007000DEBFCDBF11E0A0E0B1E0E8EFF0E002C0EC",
		":1000800005900D92A030B107D9F711E0A0E0B1E0E2",
		":1000900001C01D92A030B107E1F70C9467000C94E9",
		":1000A00000008FEF84B987B98EEF8AB9089501C037",
		":1000B0000197009759F020E00000000000000000C8",
		":1000C000000000002F5F2A3599F3F6CF08958FEFD7",
		":1000D00084B987B98EEF8AB98FEF88B985B98BB9A2",
		":1000E00084EF91E00E94570018B815B81BB884EF50",
		":0800F00091E00E945700F0CFDF",
		":00000001FF"}

	actual := IsFileValid(file)

	if actual != expected {
		t.Errorf("No Match: %t != %t", actual, expected)
	}

}

func TestIsCRCOnWholeFileNotValid_whenTypical(t *testing.T) {
	expected := false
	file := []string{
		":100000000C9434000C944F000C944F000C944F004F",
		":100010000C944F000C944F000C944F000C944F0014",
		":100020000C944F000C944F000C944F000C944F0054",
		":100030000C944F000C944F000C944F000C944F0064",
		":100040000C944F000C944F000C944F000C944F00F4",
		":100050000C944F000C944F000C944F000C944F00E4",
		":100060000C944F000C944F0011241FBECFEFD4E02E",
		":10007000DEBFCDBF11E0A0E0B1E0E8EFF0E002C0EC",
		":1000800005900D92A030B107D9F711E0A0E0B1E0E2",
		":1000900001C01D92A030B107E1F70C9467000C94E9",
		":1000A00000008FEF84B987B98EEF8AB9089501C037",
		":1000B0000197009759F020E00000000000000000C8",
		":1000C000000000002F5F2A3599F3F6CF08958FEFD7",
		":1000D00084B987B98EEF8AB98FEF88B985B98BB9A2",
		":1000E00084EF91E00E94570018B815B81BB884EF50",
		":0800F00091E00E945700F0CFDF",
		":00000001FF"}

	actual := IsFileValid(file)

	if actual != expected {
		t.Errorf("No Match: %t != %t", actual, expected)
	}

}

func TestIsCRCOnWholeFileWorks_whenTypical2(t *testing.T) {
	expected := true
	file := []string{
		":100000000C9434000C9449000C9449000C94490061",
		":100010000C9449000C9449000C9449000C9449003C",
		":100020000C9449000C9449000C9449000C9449002C",
		":100030000C9449000C9449000C9449000C9449001C",
		":100040000C9449000C9449000C9449000C9449000C",
		":100050000C9449000C9449000C9449000C944900FC",
		":100060000C9449000C94490011241FBECFEFD8E036",
		":10007000DEBFCDBF11E0A0E0B1E0E2EEF0E002C0F3",
		":1000800005900D92A038B107D9F70E944B000C944F",
		":100090006F000C940000CF93DF9300D000D0CDB759",
		":1000A000DEB784E084B9299A1C821B828B819C81F3",
		":1000B00088399A4330F48B819C8101969C838B8391",
		":1000C000F5CF29981A82198289819A8188399A43B1",
		":1000D00050F789819A8101969A838983F5CFF894A4",
		":0200E000FFCF50",
		":1000E200DCF4357695D222487FE0E5794239BEBC10",
		":1000F2009976F8EBD027F048EC55FE9D445616A3AE",
		":10010200235402C72946C35E7AB6E9237E30103FE4",
		":10011200D1E2749A21487D42E3A1610BA56DBEC272",
		":100122005E5832EC1821DDC9DE3BE6712E5CC95FF8",
		":100132006905C55B89E5275F524E0A91C0594F4E4A",
		":10014200E9860FDB493347FA2D5045A62F1657F3A0",
		":100152002BA486FABF76AECEB8071C4E8A92E05C1C",
		":00000001FF"}

	actual := IsFileValid(file)

	if actual != expected {
		t.Errorf("No Match: %t != %t", actual, expected)
	}

}

func TestTotalNumberOfBytes_whenTypical(t *testing.T) {
	expected := 248
	file := []string{
		":100000000C9434000C944F000C944F000C944F004F",
		":100010000C944F000C944F000C944F000C944F0024",
		":100020000C944F000C944F000C944F000C944F0014",
		":100030000C944F000C944F000C944F000C944F0004",
		":100040000C944F000C944F000C944F000C944F00F4",
		":100050000C944F000C944F000C944F000C944F00E4",
		":100060000C944F000C944F0011241FBECFEFD4E02E",
		":10007000DEBFCDBF11E0A0E0B1E0E8EFF0E002C0EC",
		":1000800005900D92A030B107D9F711E0A0E0B1E0E2",
		":1000900001C01D92A030B107E1F70C9467000C94E9",
		":1000A00000008FEF84B987B98EEF8AB9089501C037",
		":1000B0000197009759F020E00000000000000000C8",
		":1000C000000000002F5F2A3599F3F6CF08958FEFD7",
		":1000D00084B987B98EEF8AB98FEF88B985B98BB9A2",
		":1000E00084EF91E00E94570018B815B81BB884EF50",
		":0800F00091E00E945700F0CFDF",
		":00000001FF"}

	actual := TotalNumberOfBytes(file)

	if actual != expected {
		t.Errorf("No Match: %d != %d", actual, expected)
	}

}
